{"version":3,"sources":["views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/Tooltip/Tooltip.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/SearchInput.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/components/Select/Select.tsx","views/Farms/components/MoonFarming.tsx","views/Farms/Farms.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx"],"names":["ViewMode","getLiquidityUrlPathParts","quoteTokenAdresses","tokenAddresses","firstPart","process","secondPart","Wrapper","styled","div","StyledLinkExternal","LinkExternal","theme","colors","text","primary","DetailsSection","polygonScanAddress","removed","totalValueFormated","lpLabel","addLiquidityUrl","TranslateString","useI18n","justifyContent","href","external","bold","Flex","MultiplierTag","Tag","card","CardHeading","multiplier","isCommunityFarm","farmImage","tokenSymbol","alignItems","mb","src","alt","width","height","flexDirection","split","variant","StyledTokenInput","input","isWarning","shadows","warning","inset","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","symbol","onChange","onSelectMax","value","inputTitle","isBalanceZero","displayBalance","parseFloat","toFixed","style","position","pl","fontSize","toLocaleString","placeholder","scale","onClick","mr","color","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","useCallback","e","currentTarget","handleSelectMax","title","ModalActions","disabled","a","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","pid","onStake","useStake","onUnstake","useUnstake","rawStakedBalance","getBalanceNumber","useModal","onPresentDeposit","onPresentWithdraw","HarvestAction","earnings","account","useWeb3React","onReward","useHarvest","rawEarningsBalance","Action","StyledUnlockButton","UnlockButton","StyledButton","Button","CardActions","farm","requestedApproval","setRequestedApproval","useFarmFromSymbol","lpSymbol","lpAddresses","useFarmUser","allowance","lpAddress","getAddress","lpName","toUpperCase","isApproved","isGreaterThan","web3","useWeb3","lpContract","getERC20Contract","onApprove","useApprove","handleApprove","console","error","textTransform","pr","mt","calculatePdustEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","pdustPrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","Grid","GridItem","Description","ApyCalculatorModal","apy","oneThousandDollarsWorthOfPdust","toNumber","pdustEarnedPerThousand1D","pdustEarnedPerThousand7D","pdustEarnedPerThousand30D","pdustEarnedPerThousand365D","ApyButton","onPresentApyModal","event","stopPropagation","ml","RainbowLight","keyframes","StyledCardAccent","FCard","props","background","Divider","borderColor","ExpandingWrapper","expanded","StyledText","textDisabled","FarmCard","showExpandableSection","setShowExpandableSection","communityFarms","includes","token","toLocaleLowerCase","liquidity","undefined","maximumFractionDigits","replace","earnLabel","dual","farmAPY","liquidityUrlPathParts","quoteToken","address","BASE_ADD_LIQUIDITY_URL","display","CardActionsContainer","ExpandableSectionButton","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","IconImage","Image","Farm","image","label","Amount","span","earned","Earned","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","TooltipContent","tooltip","zIndices","modal","Tooltip","content","children","MultiplierWrapper","Multiplier","displayMultipler","toLowerCase","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","xl","ActionTitles","Title","secondary","Subtle","ActionContent","Staked","userData","earningsBigNumber","BigNumber","usePricePdustMatic","earningsBusd","multipliedBy","useCountUp","start","end","duration","separator","decimals","countUp","update","updateValue","useRef","useEffect","current","lg","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","apr","polygon","info","name","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","translationId","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","setActionPanelToggled","toggleActionPanel","isXs","tableSchema","columnNames","map","column","Object","keys","key","columnIndex","indexOf","React","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","ref","row","original","scrollIntoView","behavior","FarmTabButtons","useRouteMatch","url","isExact","useTheme","isDark","textColor","toggleTheme","activeIndex","as","Link","to","borderRadius","InputWrapper","SearchInput","setToggled","inputEl","onBlur","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","DropDownHeader","inputSecondary","DropDownListContainer","dropdown","DropDownContainer","isOpen","css","boxShadow","DropDownList","ul","ListItem","li","Select","options","containerRef","dropdownRef","setIsOpen","selectedOption","setSelectedOption","containerSize","setContainerSize","toggling","onOptionClicked","option","offsetWidth","offsetHeight","float","StyledBackground","Img","img","MoonFarming","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","Header","farming","Container2","Background","Farms","path","pathname","useLocation","farmsLP","useFarms","query","setQuery","setViewMode","sortOption","setSortOption","prices","useGetApiPrices","dispatch","useDispatch","fastRefresh","useRefresh","fetchFarmUserDataAsync","stackedOnly","setStackedOnly","activeFarms","filter","inactiveFarms","stackedOnlyFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPY","lpTotalInQuoteToken","quoteTokenPriceUsd","totalLiquidity","times","getFarmApy","poolWeight","lowercaseQuery","isActive","farmsStaked","rowData","farms","orderBy","slice","sortFarms","quoteTokenSymbol","size","Page","checked","marginLeft","target","length","sort","b","exact","renderContent","role","defaultProps"],"mappings":"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","file":"static/js/9.db86c58b.chunk.js","sourcesContent":["export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  translationId: number\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APY: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    translationId: 1072,\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    translationId: 736,\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    translationId: 1072,\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    translationId: 736,\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    translationId: 999,\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    translationId: 999,\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenAdresses ? quoteTokenAdresses[chainId] : 'MATIC'\n  const secondPart = tokenAddresses ? tokenAddresses[chainId] : 'MATIC'\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from 'polygon-moonwalkerswap-uikit'\n\nexport interface ExpandableSectionProps {\n  polygonScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  polygonScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal href={addLiquidityUrl}>{lpLabel}</StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={polygonScanAddress} bold={false}>\n          {TranslateString(356, 'View on PolygonScan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from 'polygon-moonwalkerswap-uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n  color: ${({ theme }) => theme.colors.card};\n  background-color: ${({ theme }) => theme.colors.text};\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityFarm,\n  farmImage,\n  tokenSymbol,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={75} height={75} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from 'polygon-moonwalkerswap-uikit'\nimport useI18n from '../../hooks/useI18n'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n}) => {\n  const TranslateString = useI18n()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = isBalanceZero ? '0' : parseFloat(max).toFixed(4)\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">\n            {TranslateString(1120, 'Balance')}: {displayBalance.toLocaleString()}\n          </Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput onChange={onChange} placeholder=\"0\" value={value} />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {TranslateString(452, 'Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          No tokens to stake:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {TranslateString(999, 'get')} {symbol}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, LinkExternal } from 'polygon-moonwalkerswap-uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={TranslateString(1068, 'Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={TranslateString(1070, 'Stake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\">\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={pendingTx || fullBalance === '0' || val === '0'}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {TranslateString(999, 'Get')} {tokenName}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from 'moonwalkerswap-uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={TranslateString(1126, 'Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={TranslateString(588, 'Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\">\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from 'polygon-moonwalkerswap-uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake LP')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from 'polygon-moonwalkerswap-uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useWeb3React } from '@web3-react/core'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n\n  const rawEarningsBalance = account ? getBalanceNumber(earnings) : 0\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <Button\n        disabled={rawEarningsBalance === 0 || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          await onReward()\n          setPendingTx(false)\n        }}\n      >\n        {TranslateString(562, 'Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { provider as ProviderType } from 'web3-core'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getERC20Contract } from 'utils/contractHelpers'\nimport { Button, Flex, Text } from 'polygon-moonwalkerswap-uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport useWeb3 from 'hooks/useWeb3'\nimport { useApprove } from 'hooks/useApprove'\nimport UnlockButton from 'components/UnlockButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nconst StyledUnlockButton = styled(UnlockButton)`\n\n  background: ${({ theme }) => theme.colors.primary};\n  color: #000000;\n  width: 100%;\n  border-radius: 7px;\n`\nconst StyledButton = styled(Button)`\n  color: #000000;\n`\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  provider?: ProviderType\n  account?: string\n  addLiquidityUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = useFarmFromSymbol(farm.lpSymbol)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = getAddress(lpAddresses)\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const web3 = useWeb3()\n\n  const lpContract = getERC20Contract(lpAddress, web3)\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <StyledButton mt=\"8px\" width=\"100%\"  disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(758, 'Approve Contract')}\n      </StyledButton>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          PDUST\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(1072, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(1074, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <StyledUnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculatePdustEarnedPerThousandDollars = ({ numberOfDays, farmApy, pdustPrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting Dust balance with a dollar balance of $1000.\n  const principal = 1000 / pdustPrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the Dust earned, deduct the amount after compounding (finalAmount) from the starting Dust balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from 'polygon-moonwalkerswap-uikit'\nimport useI18n from 'hooks/useI18n'\nimport { calculatePdustEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  pdustPrice?: BigNumber\n  apy?: number\n  addLiquidityUrl?: string\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  pdustPrice,\n  apy,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n  const oneThousandDollarsWorthOfPdust = 1000 / pdustPrice.toNumber()\n\n  const pdustEarnedPerThousand1D = calculatePdustEarnedPerThousandDollars({ numberOfDays: 1, farmApy: apy, pdustPrice })\n  const pdustEarnedPerThousand7D = calculatePdustEarnedPerThousandDollars({ numberOfDays: 7, farmApy: apy, pdustPrice })\n  const pdustEarnedPerThousand30D = calculatePdustEarnedPerThousandDollars({ numberOfDays: 30, farmApy: apy, pdustPrice })\n  const pdustEarnedPerThousand365D = calculatePdustEarnedPerThousandDollars({\n    numberOfDays: 365,\n    farmApy: apy,\n    pdustPrice,\n  })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(860, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(858, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(864, 'Dust per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: pdustEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfPdust })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{pdustEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: pdustEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfPdust })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{pdustEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: pdustEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfPdust })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{pdustEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: pdustEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfPdust })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{pdustEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          866,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={addLiquidityUrl}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { IconButton, useModal, CalculateIcon } from 'polygon-moonwalkerswap-uikit'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  pdustPrice?: BigNumber\n  apy?: number\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, pdustPrice, apy, addLiquidityUrl }) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal lpLabel={lpLabel} pdustPrice={pdustPrice} apy={apy} addLiquidityUrl={addLiquidityUrl} />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\n      <CalculateIcon width=\"18px\" />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from 'polygon-moonwalkerswap-uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider as ProviderType } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: number\n  liquidity?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n\t0% {\n\t\tbackground-position: 0% 50%;\n\t}\n\t50% {\n\t\tbackground-position: 100% 50%;\n\t}\n\t100% {\n\t\tbackground-position: 0% 50%;\n\t}\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 32px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\nconst StyledText = styled(Text)`\n  color: ${({ theme }) => theme.colors.textDisabled};\n`\n\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  pdustPrice?: BigNumber\n  provider?: ProviderType\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, pdustPrice, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const isCommunityFarm = communityFarms.includes(farm.token.symbol)\n  // We assume the token name is coin pair + lp e.g. pDUST-MATIC LP, LINK-MATIC LP,\n  // NAR-pDUST LP. The images should be dust-matic.svg, link-matic.svg, nar-dust.svg\n  // eslint-disable-next-line\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n\n  const totalValueFormated = farm.liquidity\n    ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('MoonWalker', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'pDUST  '\n\n  const farmAPY = farm.apy && farm.apy.toLocaleString('en-US', { maximumFractionDigits: 2 })\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAdresses: farm.quoteToken.address,\n    tokenAddresses: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return (\n    <FCard>\n      {farm.token.symbol === 'pDUST' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        isCommunityFarm={isCommunityFarm}\n        farmImage={farmImage}\n        tokenSymbol={farm.token.symbol}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <StyledText>{TranslateString(736, 'APR')}:</StyledText>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} pdustPrice={pdustPrice} apy={farm.apy} />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <StyledText>{TranslateString(318, 'Earn')}:</StyledText>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          polygonScanAddress={`https://polygonscan.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport { Address } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport useI18n from 'hooks/useI18n'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  lpLabel: string\n  quoteTokenAdresses: Address\n  quoteTokenSymbol: string\n  tokenAddresses: Address\n  pdustPrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  lpLabel,\n  quoteTokenAdresses,\n  tokenAddresses,\n  pdustPrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, tokenAddresses })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  return (\n    <Container>\n      {originalValue ? (\n        <>\n          <AprWrapper>{value}%</AprWrapper>\n          {!hideButton && (\n            <ApyButton lpLabel={lpLabel} pdustPrice={pdustPrice} apy={originalValue} addLiquidityUrl={addLiquidityUrl} />\n          )}\n        </>\n      ) : (\n        <AprWrapper>{TranslateString(656, 'Loading...')}</AprWrapper>\n      )}\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport { Text, Image } from 'polygon-moonwalkerswap-uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  image: string\n}\n\nconst IconImage = styled(Image)`\n  width: 24px;\n  height: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n    height: 40px;\n  }\n`\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n// eslint-disable-next-line\nconst Farm: React.FunctionComponent<FarmProps> = ({ image, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const TranslateString = useI18n()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          {TranslateString(999, 'FARMING')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n       <IconImage src={`/images/farms/${image}.png`} alt=\"icon\" width={40} height={40} mr=\"8px\" />\n      {/* <IconImage src='/images/farms/farmimage2.svg' alt=\"icon\" width={40} height={40} mr=\"8px\" /> */}\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedProps> = ({ earnings }) => {\n  const { account } = useWeb3React()\n  const displayBalance = earnings !== null && account ? earnings.toLocaleString() : '?'\n\n  return <Amount earned={earnings}>{displayBalance}</Amount>\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from 'polygon-moonwalkerswap-uikit'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { isXl } = useMatchBreakpoints()\n  const isMobile = !isXl\n\n  return (\n    <Container>\n      {!isMobile && 'Details'}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface TooltipProps {\n  content: React.ReactNode\n}\n\nconst TooltipContent = styled.div`\n  background: ${({ theme }) => theme.tooltip.background};\n  padding: 16px;\n  border-radius: 16px;\n  color: ${({ theme }) => theme.tooltip.text};\n  width: max-content;\n  display: none;\n  padding: 16px;\n  max-height: 500px;\n  z-index: ${({ theme }) => theme.zIndices.modal};\n  position: absolute;\n  bottom: calc(100% + 16px);\n  transform: translate(34px, 0);\n  right: 0;\n  max-width: 246px;\n\n  &:after {\n    content: '';\n    display: block;\n    width: 0;\n    height: 0;\n    border-left: 10px solid transparent;\n    border-right: 10px solid transparent;\n    border-top: 10px solid ${({ theme }) => theme.tooltip.background};\n    bottom: 0;\n    position: absolute;\n    transform: translate(-34px, 9px);\n    right: 0;\n  }\n`\n\nconst Container = styled.div`\n  position: relative;\n\n  &:hover ${TooltipContent}, &:focus-within ${TooltipContent} {\n    display: block;\n  }\n`\n\nconst Tooltip: React.FunctionComponent<TooltipProps> = ({ content, children }) => {\n  return (\n    <Container>\n      {children}\n      <TooltipContent>{content}</TooltipContent>\n    </Container>\n  )\n}\n\nexport default Tooltip\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon } from 'polygon-moonwalkerswap-uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Tooltip from '../Tooltip/Tooltip'\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    text-align: left;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n\n  svg {\n    margin-left: 14px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    svg {\n      margin-left: 0;\n    }\n  }\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultipler = multiplier ? multiplier.toLowerCase() : '-'\n  const TranslateString = useI18n()\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultipler}</MultiplierWrapper>\n      <Tooltip\n        content={\n          <div>\n            {TranslateString(999, 'The multiplier represents the amount of pDUST rewards each farm gets.')}\n            <br />\n            <br />\n            {TranslateString(\n              999,\n              'For example, if a 1x farm was getting 1 pDUST per block, a 25x farm would be getting 25 pDUST per block.',\n            )}\n          </div>\n        }\n      >\n        <HelpIcon color=\"textSubtle\" />\n      </Tooltip>\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text } from 'polygon-moonwalkerswap-uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Tooltip from '../Tooltip/Tooltip'\n\nexport interface LiquidityProps {\n  liquidity: number\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    text-align: left;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n\n  svg {\n    margin-left: 14px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    svg {\n      margin-left: 0;\n    }\n  }\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity = liquidity\n    ? `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n  const TranslateString = useI18n()\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <Tooltip content={TranslateString(999, 'The total value of the funds in this farm’s liquidity pool')}>\n        <HelpIcon color=\"textSubtle\" />\n      </Tooltip>\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  font-weight: 600;\n  font-size: 12px;\n  margin-bottom: 8px;\n`\n\nexport const Title = styled.span`\n  color: ${({ theme }) => theme.colors.secondary};\n`\n\nexport const Subtle = styled.span`\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n\nexport const Staked = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n","import React, { useState, useRef, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button } from 'polygon-moonwalkerswap-uikit'\nimport BigNumber from 'bignumber.js'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useHarvest } from 'hooks/useHarvest'\nimport useI18n from 'hooks/useI18n'\nimport { usePricePdustMatic } from 'state/hooks'\nimport { useCountUp } from 'react-countup'\n\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from './styles'\n\nconst HarvestAction: React.FunctionComponent<FarmWithStakedValue> = ({ pid, userData }) => {\n  const { account } = useWeb3React()\n  const earningsBigNumber = userData && account ? new BigNumber(userData.earnings) : null\n  const pdustPrice = usePricePdustMatic()\n  let earnings = null\n  let earningsBusd = 0\n  let displayBalance = '?'\n\n  if (earningsBigNumber) {\n    earnings = getBalanceNumber(earningsBigNumber)\n    earningsBusd = new BigNumber(earnings).multipliedBy(pdustPrice).toNumber()\n    displayBalance = earnings.toLocaleString()\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const TranslateString = useI18n()\n\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: earningsBusd,\n    duration: 1,\n    separator: ',',\n    decimals: 3,\n  })\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(earningsBusd)\n  }, [earningsBusd, updateValue])\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Title>pDUST </Title>\n        <Subtle>EARNED</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          <Staked>~{countUp}USD</Staked>\n        </div>\n        <Button\n          disabled={!earnings || pendingTx || !account}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n          ml=\"4px\"\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon } from 'polygon-moonwalkerswap-uikit'\nimport UnlockButton from 'components/UnlockButton'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser } from 'state/hooks'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport useI18n from 'hooks/useI18n'\nimport { useApprove } from 'hooks/useApprove'\nimport { getERC20Contract } from 'utils/contractHelpers'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport useWeb3 from 'hooks/useWeb3'\n\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Title, Subtle } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\nconst Staked: React.FunctionComponent<FarmWithStakedValue> = ({ pid, lpSymbol, lpAddresses, quoteToken, token }) => {\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const web3 = useWeb3()\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAdresses: quoteToken.address,\n    tokenAddresses: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(<WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={lpSymbol} />)\n\n  const lpContract = getERC20Contract(lpAddress, web3)\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{TranslateString(999, 'START FARMING')}</Subtle>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (rawStakedBalance) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Title>{lpSymbol} </Title>\n            <Subtle>{TranslateString(999, 'STAKED')}</Subtle>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Earned>{displayBalance}</Earned>\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton variant=\"secondary\" onClick={onPresentDeposit}>\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{TranslateString(999, 'STAKE')} </Subtle>\n          <Title>{lpSymbol}</Title>\n        </ActionTitles>\n        <ActionContent>\n          <Button width=\"100%\" onClick={onPresentDeposit} variant=\"secondary\">\n            {TranslateString(999, 'Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Subtle>{TranslateString(999, 'ENABLE FARM')}</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {TranslateString(999, 'Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\nimport { LinkExternal, Text } from 'polygon-moonwalkerswap-uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { communityFarms } from 'config/constants'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\nconst Container = styled.div`\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n  color: ${({ theme }) => theme.colors.textSubtle}\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({ details, apr, multiplier, liquidity }) => {\n  const farm = details\n\n  const TranslateString = useI18n()\n  const { quoteToken, token, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('MOONWALKER', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAdresses: quoteToken.address,\n    tokenAddresses: token.address,\n  })\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const polygon = `https://polygonscan.com/address/${lpAddress}`\n  const info = `https://info.moonwalker.network/pair/${lpAddress}`\n  const isCommunityFarm = communityFarms.includes(token.symbol)\n\n  return (\n    <Container>\n      <InfoContainer>\n        <StakeContainer>\n          <StyledLinkExternal href={`https://polygon-swap.moonwalker.network/add/${liquidityUrlPathParts}`}>\n            {TranslateString(999, `Get ${lpLabel}`, { name: lpLabel })}\n          </StyledLinkExternal>\n        </StakeContainer>\n        <StyledLinkExternal href={polygon}>{TranslateString(999, 'View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{TranslateString(999, 'See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{TranslateString(736, 'APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{TranslateString(999, 'Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{TranslateString(999, 'Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} />\n        <StakedAction {...farm} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from 'polygon-moonwalkerswap-uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowProps> = (props) => {\n  const { details } = props\n  const [actionPanelToggled, setActionPanelToggled] = useState(false)\n  const TranslateString = useI18n()\n\n  const toggleActionPanel = () => {\n    setActionPanelToggled(!actionPanelToggled)\n  }\n\n  const { isXl, isXs } = useMatchBreakpoints()\n\n  const isMobile = !isXl\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isXs) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelToggled} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={TranslateString(736, 'APR')}>\n                        <Apr {...props.apr} hideButton={isMobile} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout\n                        label={TranslateString(tableSchema[columnIndex].translationId, tableSchema[columnIndex].label)}\n                      >\n                        {React.createElement(cells[key], props[key])}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={TranslateString(1072, 'Earned')}>\n                <Earned {...props.earned} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={TranslateString(736, 'APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelToggled} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {actionPanelToggled && details && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from 'polygon-moonwalkerswap-uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n}\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const TranslateString = useI18n()\n  const { data, columns } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {TranslateString(999, 'To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem } from 'polygon-moonwalkerswap-uikit'\nimport useI18n from 'hooks/useI18n'\nimport useTheme from 'hooks/useTheme'\n\nconst FarmTabButtons = () => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n  // eslint-disable-next-line\n  const { isDark, toggleTheme } = useTheme()\n  const textColor = isDark ? \"\" : \"#2A2A2A\";\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} scale=\"sm\" variant=\"primary\">\n        <ButtonMenuItem as={Link} to={`${url}`} style={{ borderRadius: '30px', width: '100px', color:textColor }}>\n          {TranslateString(1198, 'Live')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`} style={{ borderRadius: '30px', width: '100px', color:textColor }}>\n          {TranslateString(388, 'Finished')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React, { useState, useRef } from 'react'\nimport { Input } from 'polygon-moonwalkerswap-uikit'\nimport styled from 'styled-components'\n\nconst StyledInput = styled(Input)`\n  border-radius: 16px;\n  margin-left: auto;\n`\n\nconst InputWrapper = styled.div`\n  position: relative;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 234px;\n    display: block;\n  }\n`\n\nconst Container = styled.div<{ toggled: boolean }>``\n\ninterface Props {\n  value: string\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst SearchInput: React.FC<Props> = ({ value, onChange }) => {\n  const [toggled, setToggled] = useState(false)\n  const inputEl = useRef(null)\n\n  return (\n    <Container toggled={toggled}>\n      <InputWrapper>\n        <StyledInput\n          ref={inputEl}\n          value={value}\n          onChange={onChange}\n          placeholder=\"Search farms\"\n          onBlur={() => setToggled(false)}\n        />\n      </InputWrapper>\n    </Container>\n  )\n}\n\nexport default SearchInput\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from 'polygon-moonwalkerswap-uikit'\nimport { ViewMode } from '../types'\n\ninterface ToogleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToogleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useState, useRef, useEffect } from 'react'\nimport styled, { css } from 'styled-components'\nimport { ArrowDropDownIcon, Text } from 'polygon-moonwalkerswap-uikit'\n\nconst DropDownHeader = styled.div`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0px 16px;\n  box-shadow: ${({ theme }) => theme.shadows.inset};\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n  border-radius: 16px;\n  background: ${({ theme }) => theme.colors.input};\n  transition: border-radius 0.15s;\n`\n\nconst DropDownListContainer = styled.div`\n  min-width: 136px;\n  height: 0;\n  position: absolute;\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background  };\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n  transition: transform 0.15s, opacity 0.15s;\n  transform: scaleY(0);\n  transform-origin: top;\n  opacity: 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n`\n\nconst DropDownContainer = styled.div<{ isOpen: boolean; width: number; height: number }>`\n  cursor: pointer;\n  width: ${({ width }) => width}px;\n  position: relative;\n  background: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  height: 40px;\n  min-width: 136px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n\n  ${(props) =>\n    props.isOpen &&\n    css`\n      ${DropDownHeader} {\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n        border-radius: 16px 16px 0 0;\n      }\n\n      ${DropDownListContainer} {\n        height: auto;\n        transform: scaleY(1);\n        opacity: 1;\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        border-top-width: 0;\n        border-radius: 0 0 16px 16px;\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n      }\n    `}\n\n  svg {\n    position: absolute;\n    right: 16px;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n`\n\nconst DropDownList = styled.ul`\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n`\n\nconst ListItem = styled.li`\n  list-style: none;\n  padding: 8px 16px;\n  &:hover {\n    background: ${({ theme }) => theme.colors.inputSecondary};\n  }\n`\n\nexport interface SelectProps {\n  options: OptionProps[]\n  onChange?: (option: OptionProps) => void\n}\n\nexport interface OptionProps {\n  label: string\n  value: any\n}\n\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onChange }) => {\n  const containerRef = useRef(null)\n  const dropdownRef = useRef(null)\n  const [isOpen, setIsOpen] = useState(false)\n  const [selectedOption, setSelectedOption] = useState(options[0])\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 })\n\n  const toggling = () => setIsOpen(!isOpen)\n\n  const onOptionClicked = (option: OptionProps) => () => {\n    setSelectedOption(option)\n    setIsOpen(false)\n\n    if (onChange) {\n      onChange(option)\n    }\n  }\n\n  useEffect(() => {\n    setContainerSize({\n      width: dropdownRef.current.offsetWidth, // Consider border\n      height: dropdownRef.current.offsetHeight,\n    })\n  }, [])\n\n  return (\n    <DropDownContainer isOpen={isOpen} ref={containerRef} {...containerSize}>\n      {containerSize.width !== 0 && (\n        <DropDownHeader onClick={toggling}>\n          <Text>{selectedOption.label}</Text>\n        </DropDownHeader>\n      )}\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\n      <DropDownListContainer>\n        <DropDownList ref={dropdownRef}>\n          {options.map((option) =>\n            option.label !== selectedOption.label ? (\n              <ListItem onClick={onOptionClicked(option)} key={option.label}>\n                <Text>{option.label}</Text>\n              </ListItem>\n            ) : null,\n          )}\n        </DropDownList>\n      </DropDownListContainer>\n    </DropDownContainer>\n  )\n}\n\nexport default Select\n","import React from 'react'\nimport styled, {keyframes} from 'styled-components'\n\nconst float = keyframes`\n\t0% {\n\t\ttransform: translatey(0px);\n\t}\n\t50% {\n\t\ttransform: translatey(10px);\n\t}\n\t100% {\n\t\ttransform: translatey(0px);\n\t}\n`;\n\nconst StyledBackground = styled.div`\n\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display:block;\n    background-image: url('/images/moon/farmingbg.svg');\n    background-repeat: no-repeat;\n    background-position: center 110px;\n\n  }\n`\n\n\nconst Img = styled.img`\n  animation: ${float} 4s ease-in-out infinite;\n  transform: translate3d(0, 0, 0);\n`\n\nconst MoonFarming = () => {\n\n\n  return (\n    <StyledBackground>\n      <Img src=\"/images/moon/farming.svg\" alt=\"jet\"/>\n    </StyledBackground>\n  )\n}\n\nexport default MoonFarming\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text } from 'moonwalkerswap-uikit'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePricePdustMatic, useGetApiPrices } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { Farm } from 'state/types'\nimport useI18n from 'hooks/useI18n'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApy } from 'utils/apy'\nimport { orderBy } from 'lodash'\n\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport SearchInput from './components/SearchInput'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\nimport Select, { OptionProps } from './components/Select/Select'\nimport MoonFarming from './components/MoonFarming'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\n\nconst Header = styled.div`\n  padding: 32px 0px;\n  background: ${({ theme }) => theme.colors.farming};\n\n  display: block;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding: 0 0 0 8.5%;\n    min-height: 190px;\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    align-items: center;\n    justify-content: center;\n  }\n`\n\nconst Container = styled.div``\nconst Container2 = styled.div`\n  display: flex;\n  justify-content: center;\n`\nconst Background = styled.div`\n  width: 100%;\n  background-image: url('/images/jet/bgf.svg');\n  background-repeat: no-repeat;\n  background-position: top 80px right;\n`\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const pdustPrice = usePricePdustMatic()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = useState(ViewMode.TABLE)\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n  const prices = useGetApiPrices()\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stackedOnly, setStackedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X')\n\n  const stackedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n    switch (sortOption) {\n      case 'apr':\n        return orderBy(farms, 'apy', 'desc')\n      case 'multiplier':\n        return orderBy(\n          farms,\n          (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n          'desc',\n        )\n      case 'earned':\n        return orderBy(farms, (farm: FarmWithStakedValue) => (farm.userData ? farm.userData.earnings : 0), 'desc')\n      case 'liquidity':\n        return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n      default:\n        return farms\n    }\n  }\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !prices) {\n          return farm\n        }\n\n        const quoteTokenPriceUsd = prices[farm.quoteToken.symbol.toLowerCase()]\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\n        const apy = getFarmApy(farm.poolWeight, pdustPrice, totalLiquidity)\n\n        return { ...farm, apy, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = query.toLowerCase()\n        farmsToDisplayWithAPY = farmsToDisplayWithAPY.filter((farm: FarmWithStakedValue) => {\n          if (farm.lpSymbol.toLowerCase().includes(lowercaseQuery)) {\n            return true\n          }\n\n          return false\n        })\n      }\n      return farmsToDisplayWithAPY\n    },\n    [pdustPrice, prices, query],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const isActive = !pathname.includes('history')\n  let farmsStaked = []\n  if (isActive) {\n    farmsStaked = stackedOnly ? farmsList(stackedOnlyFarms) : farmsList(activeFarms)\n  } else {\n    farmsStaked = farmsList(inactiveFarms)\n  }\n\n  farmsStaked = sortFarms(farmsStaked)\n\n  const rowData = farmsStaked.map((farm) => {\n    const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses } = farm\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('MOONWALKER', '')\n\n    const row: RowProps = {\n      apr: {\n        value: farm.apy && farm.apy.toLocaleString('en-US', { maximumFractionDigits: 2 }),\n        multiplier: farm.multiplier,\n        lpLabel,\n        quoteTokenAdresses,\n        quoteTokenSymbol,\n        tokenAddresses,\n        pdustPrice,\n        originalValue: farm.apy,\n      },\n      farm: {\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\n        label: lpLabel,\n        pid: farm.pid,\n      },\n      earned: {\n        earnings: farm.userData ? getBalanceNumber(new BigNumber(farm.userData.earnings)) : null,\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} />\n    }\n\n    return (\n      <div>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsStaked.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} pdustPrice={pdustPrice} account={account} removed={false} />\n            ))}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsStaked.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} pdustPrice={pdustPrice} account={account} removed />\n            ))}\n          </Route>\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <Header>\n        <Container>\n          <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"24px\">\n            {TranslateString(999, 'Farms')}\n          </Heading>\n          <Heading size=\"lg\" color=\"text\">\n            {TranslateString(999, 'Stake LP tokens to earn pDUST.')}\n          </Heading>\n        </Container>\n        <Container2>\n\n          <MoonFarming />\n        </Container2>\n      </Header>\n\n      <Background>\n        <Page>\n          <ControlContainer>\n            <ViewControls>\n              <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n              <ToggleWrapper>\n                <Toggle checked={stackedOnly} onChange={() => setStackedOnly(!stackedOnly)} scale=\"sm\" />\n                <Text> {TranslateString(1116, 'Staked only')}</Text>\n              </ToggleWrapper>\n              <FarmTabButtons />\n            </ViewControls>\n            <FilterContainer>\n              <LabelWrapper>\n                <Text>SORT BY</Text>\n                <Select\n                  options={[\n                    {\n                      label: 'Hot',\n                      value: 'hot',\n                    },\n                    {\n                      label: 'APR',\n                      value: 'apr',\n                    },\n                    {\n                      label: 'Multiplier',\n                      value: 'multiplier',\n                    },\n                    {\n                      label: 'Earned',\n                      value: 'earned',\n                    },\n                    {\n                      label: 'Liquidity',\n                      value: 'liquidity',\n                    },\n                  ]}\n                  onChange={handleSortOptionChange}\n                />\n              </LabelWrapper>\n              <LabelWrapper style={{ marginLeft: 16 }}>\n                <Text>SEARCH</Text>\n                <SearchInput onChange={handleChangeQuery} value={query} />\n              </LabelWrapper>\n            </FilterContainer>\n          </ControlContainer>\n          {renderContent()}\n          <StyledImage src=\"/images/moon/logo.svg\" alt=\"moonwalkerswap illustration\" width={120} height={103} />\n        </Page>\n      </Background>\n    </>\n  )\n}\n\nexport default Farms\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from 'polygon-moonwalkerswap-uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n\n  svg {\n    fill: ${({ theme }) => theme.colors.textSubtle};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"textSubtle\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n"],"sourceRoot":""}