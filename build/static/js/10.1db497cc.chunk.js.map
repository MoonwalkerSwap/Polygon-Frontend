{"version":3,"sources":["hooks/useGetWalletNfts.ts","views/Collectibles/components/InfoRow.tsx","views/Collectibles/components/TransferNftModal.tsx","views/Collectibles/components/ClaimNftModal.tsx","views/Collectibles/components/NftCard/Preview.tsx","views/Collectibles/components/NftCard/index.tsx","views/Collectibles/components/NftGrid.tsx","views/Collectibles/components/NftList.tsx","views/Collectibles/index.tsx"],"names":["pancakeRabbitsContract","getPancakeRabbitContract","initialState","isLoading","nfts","lastUpdated","Date","now","reducer","state","action","type","data","timestamp","useGetWalletNfts","useReducer","dispatch","account","useWeb3React","useEffect","fetchNfts","a","methods","balanceOf","call","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","getBunnyId","tokenURI","tokenId","makeBatchRequest","bunnyId","tokenUri","Number","tokenIdPromises","i","push","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","tokenIds","refresh","InfoRow","styled","div","Value","Text","ModalContent","Actions","Label","label","theme","colors","text","TransferNftModal","nft","onSuccess","onDismiss","useState","setIsLoading","value","setValue","error","setError","TranslateString","useI18n","usePancakeRabbits","toastSuccess","useToast","handleConfirm","Web3","utils","isAddress","transferFrom","send","from","on","console","title","color","mb","name","htmlFor","id","placeholder","onChange","evt","inputValue","target","isWarning","disabled","width","variant","onClick","ClaimNftModal","isConfirming","setIsConfirming","toastError","bunnySpecialContract","useBunnySpecialContract","mintNFT","alignItems","justifyContent","bold","Container","borderColor","StyledImage","img","StyledVideo","video","Preview","isOwned","images","previewImageSrc","lg","videoComponent","autoPlay","controls","loop","muted","poster","src","webm","mp4","href","ipfs","rel","previewImage","alt","Header","DetailsButton","Button","attrs","InfoBlock","NftCard","canClaim","isOpen","setIsOpen","description","walletOwnsNft","length","Icon","ChevronUpIcon","ChevronDownIcon","handleClick","useModal","onPresentTransferModal","onPresentClaimModal","isActive","outline","mt","p","endIcon","as","style","textAlign","NftGrid","mediaQueries","sm","md","getBunnySpecialContract","NftList","claimableNfts","setClaimableNfts","nftTokenIds","fetchClaimableStatuses","useCallback","walletAddress","map","canClaimSingle","claimStatuses","claimStatus","handleSuccess","orderBy","StyledHero","textSubtle","Collectibles","Page","size"],"mappings":"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","file":"static/js/10.1db497cc.chunk.js","sourcesContent":["import { useWeb3React } from '@web3-react/core'\nimport { useEffect, useReducer } from 'react'\nimport { getPancakeRabbitContract } from 'utils/contractHelpers'\nimport makeBatchRequest from 'utils/makeBatchRequest'\n\nconst pancakeRabbitsContract = getPancakeRabbitContract()\n\nexport type NftMap = {\n  [key: number]: {\n    tokenUri: string\n    tokenIds: number[]\n  }\n}\n\ntype Action = { type: 'set_nfts'; data: NftMap } | { type: 'reset' } | { type: 'refresh'; timestamp: number }\n\ntype State = {\n  isLoading: boolean\n  nfts: NftMap\n  lastUpdated: number\n}\n\nconst initialState: State = {\n  isLoading: true,\n  nfts: {},\n  lastUpdated: Date.now(),\n}\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'set_nfts':\n      return {\n        ...initialState,\n        isLoading: false,\n        nfts: action.data,\n      }\n    case 'refresh':\n      return {\n        ...initialState,\n        lastUpdated: action.timestamp,\n      }\n    case 'reset':\n      return {\n        ...initialState,\n        isLoading: false,\n      }\n    default:\n      return state\n  }\n}\n\nconst useGetWalletNfts = () => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const { account } = useWeb3React()\n  const { lastUpdated } = state\n\n  useEffect(() => {\n    const fetchNfts = async () => {\n      try {\n        const balanceOf = await pancakeRabbitsContract.methods.balanceOf(account).call()\n\n        if (balanceOf > 0) {\n          let nfts: NftMap = {}\n\n          const getTokenIdAndBunnyId = async (index: number) => {\n            try {\n              const { tokenOfOwnerByIndex, getBunnyId, tokenURI } = pancakeRabbitsContract.methods\n              const tokenId = await tokenOfOwnerByIndex(account, index).call()\n              const [bunnyId, tokenUri] = await makeBatchRequest([getBunnyId(tokenId).call, tokenURI(tokenId).call])\n\n              return [Number(bunnyId), Number(tokenId), tokenUri]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n\n          nfts = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [bunnyId, tokenId, tokenUri] = association\n\n            return {\n              ...accum,\n              [bunnyId]: {\n                tokenUri,\n                tokenIds: accum[bunnyId] ? [...accum[bunnyId].tokenIds, tokenId] : [tokenId],\n              },\n            }\n          }, {})\n\n          dispatch({ type: 'set_nfts', data: nfts })\n        } else {\n          // Reset it in case of wallet change\n          dispatch({ type: 'reset' })\n        }\n      } catch (error) {\n        dispatch({ type: 'reset' })\n      }\n    }\n\n    if (account) {\n      fetchNfts()\n    }\n  }, [account, lastUpdated, dispatch])\n\n  const refresh = () => dispatch({ type: 'refresh', timestamp: Date.now() })\n\n  return { ...state, refresh }\n}\n\nexport default useGetWalletNfts\n","import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, Input, Modal, Text } from 'polygon-moonwalkerswap-uikit'\nimport { useToast } from 'state/hooks'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { usePancakeRabbits } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const pancakeRabbitsContract = usePancakeRabbits()\n  const { toastSuccess } = useToast()\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = Web3.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\n      } else {\n        await pancakeRabbitsContract.methods\n          .transferFrom(account, value, tokenIds[0])\n          .send({ from: account })\n          .on('sending', () => {\n            setIsLoading(true)\n          })\n          .on('receipt', () => {\n            onDismiss()\n            onSuccess()\n            toastSuccess('NFT successfully transferred!')\n          })\n          .on('error', () => {\n            console.error(error)\n            setError('Unable to transfer NFT')\n            setIsLoading(false)\n          })\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={TranslateString(999, 'Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { useBunnySpecialContract } from 'hooks/useContract'\nimport { useToast } from 'state/hooks'\nimport { Button, InjectedModalProps, Modal, Text, Flex } from 'polygon-moonwalkerswap-uikit'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\n\ninterface ClaimNftModalProps extends InjectedModalProps {\n  nft: Nft\n  onSuccess: () => void\n}\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\n  const [isConfirming, setIsConfirming] = useState(false)\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const { toastError, toastSuccess } = useToast()\n  const bunnySpecialContract = useBunnySpecialContract()\n\n  const handleConfirm = async () => {\n    bunnySpecialContract.methods\n      .mintNFT(nft.bunnyId)\n      .send({ from: account })\n      .on('sending', () => {\n        setIsConfirming(true)\n      })\n      .on('receipt', () => {\n        toastSuccess('Successfully claimed!')\n        onDismiss()\n        onSuccess()\n      })\n      .on('error', (error) => {\n        console.error('Unable to claim NFT', error)\n        toastError('Error', 'Unable to claim NFT, please try again.')\n        setIsConfirming(false)\n      })\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Claim Collectible')} onDismiss={onDismiss}>\n      <ModalContent>\n        <Flex alignItems=\"center\" mb=\"8px\" justifyContent=\"space-between\">\n          <Text>{TranslateString(626, 'You will receive')}:</Text>\n          <Text bold>{`1x \"${nft.name}\" Collectible`}</Text>\n        </Flex>\n      </ModalContent>\n      <Actions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!account || isConfirming}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Nft } from 'config/constants/types'\n\ninterface PreviewProps {\n  nft: Nft\n  isOwned?: boolean\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: opacity 1s linear;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 32px 32px 0 0;\n`\n\nconst StyledVideo = styled.video`\n  height: 100%;\n  width: 100%;\n`\n\nconst Preview: React.FC<PreviewProps> = ({ nft, isOwned = false }) => {\n  const { images, name, video } = nft\n  const previewImageSrc = `/images/nfts/${images.lg}`\n\n  if (video) {\n    const videoComponent = (\n      <StyledVideo autoPlay controls={false} loop muted poster={previewImageSrc}>\n        <source src={video.webm} type=\"video/webm\" />\n        <source src={video.mp4} type=\"video/mp4\" />\n      </StyledVideo>\n    )\n\n    return isOwned ? (\n      <a href={images.ipfs} target=\"_blank\" rel=\"noreferrer noopener\">\n        {videoComponent}\n      </a>\n    ) : (\n      videoComponent\n    )\n  }\n\n  const previewImage = <StyledImage src={previewImageSrc} alt={name} />\n\n  return (\n    <Container>\n      {isOwned ? (\n        <a href={images.ipfs} target=\"_blank\" rel=\"noreferrer noopener\">\n          {previewImage}\n        </a>\n      ) : (\n        previewImage\n      )}\n    </Container>\n  )\n}\n\nexport default Preview\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n} from 'polygon-moonwalkerswap-uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport InfoRow from '../InfoRow'\nimport TransferNftModal from '../TransferNftModal'\nimport ClaimNftModal from '../ClaimNftModal'\nimport Preview from './Preview'\n\ninterface NftCardProps {\n  nft: Nft\n  canClaim?: boolean\n  tokenIds?: number[]\n  onSuccess: () => void\n}\n\nconst Header = styled(InfoRow)`\n  min-height: 28px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text' })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 24px;\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft, onSuccess, canClaim = false, tokenIds = [] }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const TranslateString = useI18n()\n  const { bunnyId, name, description } = nft\n  const walletOwnsNft = tokenIds.length > 0\n  const Icon = isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const handleClick = async () => {\n    setIsOpen(!isOpen)\n  }\n\n  const [onPresentTransferModal] = useModal(<TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={onSuccess} />)\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={onSuccess} />)\n\n  return (\n    <Card isActive={walletOwnsNft || canClaim}>\n      <Preview nft={nft} isOwned={walletOwnsNft} />\n      <CardBody>\n        <Header>\n          <Heading>{name}</Heading>\n          {walletOwnsNft && (\n            <Tag outline variant=\"secondary\">\n              {TranslateString(999, 'In Wallet')}\n            </Tag>\n          )}\n          {nft?.bunnyId === bunnyId && (\n            <Tag outline variant=\"success\">\n              {TranslateString(999, 'Pic')}\n            </Tag>\n          )}\n        </Header>\n        {canClaim && (\n          <Button width=\"100%\" mt=\"24px\" onClick={onPresentClaimModal}>\n            {TranslateString(999, 'Claim this NFT')}\n          </Button>\n        )}\n        {walletOwnsNft && (\n          <Button width=\"100%\" variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n            {TranslateString(999, 'Transfer')}\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter p=\"0\">\n        <DetailsButton width=\"100%\" endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\n          {TranslateString(658, 'Details')}\n        </DetailsButton>\n        {isOpen && (\n          <InfoBlock>\n            <Text as=\"p\" color=\"textSubtle\" style={{ textAlign: 'center' }}>\n              {description}\n            </Text>\n          </InfoBlock>\n        )}\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default NftCard\n","import styled from 'styled-components'\n\nconst NftGrid = styled.div`\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: 1fr;\n  padding-bottom: 24px;\n  padding-top: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: repeat(3, 1fr);\n  }\n`\n\nexport default NftGrid\n","import React, { useCallback, useEffect, useState } from 'react'\nimport orderBy from 'lodash/orderBy'\nimport nfts from 'config/constants/nfts'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBunnySpecialContract } from 'utils/contractHelpers'\nimport useGetWalletNfts from 'hooks/useGetWalletNfts'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport { useToast } from 'state/hooks'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\n\ntype State = {\n  [key: string]: boolean\n}\n\nconst bunnySpecialContract = getBunnySpecialContract()\n\nconst NftList = () => {\n  const [claimableNfts, setClaimableNfts] = useState<State>({})\n  const { nfts: nftTokenIds, refresh } = useGetWalletNfts()\n  const { account } = useWeb3React()\n  const { toastError } = useToast()\n\n  const fetchClaimableStatuses = useCallback(\n    async (walletAddress: string) => {\n      try {\n        const claimStatuses = (await makeBatchRequest(\n          nfts.map((nft) => {\n            return bunnySpecialContract.methods.canClaimSingle(walletAddress, nft.bunnyId).call\n          }),\n        )) as boolean[]\n\n        setClaimableNfts(\n          claimStatuses.reduce((accum, claimStatus, index) => {\n            return {\n              ...accum,\n              [nfts[index].bunnyId]: claimStatus,\n            }\n          }, {}),\n        )\n      } catch (error) {\n        console.error(error)\n        toastError('Error checking NFT claimable status')\n      }\n    },\n    [setClaimableNfts, toastError],\n  )\n\n  const handleSuccess = () => {\n    refresh()\n    fetchClaimableStatuses(account)\n  }\n\n  useEffect(() => {\n    if (account) {\n      fetchClaimableStatuses(account)\n    }\n  }, [account, fetchClaimableStatuses])\n\n  return (\n    <NftGrid>\n      {orderBy(nfts, 'sortOrder').map((nft) => {\n        const tokenIds = nftTokenIds[nft.bunnyId] ? nftTokenIds[nft.bunnyId].tokenIds : []\n\n        return (\n          <div key={nft.name}>\n            <NftCard nft={nft} canClaim={claimableNfts[nft.bunnyId]} tokenIds={tokenIds} onSuccess={handleSuccess} />\n          </div>\n        )\n      })}\n    </NftGrid>\n  )\n}\n\nexport default NftList\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading } from 'polygon-moonwalkerswap-uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport NftList from './components/NftList'\n\nconst StyledHero = styled.div`\n  border-bottom: 2px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst Collectibles = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <StyledHero>\n        <Heading as=\"h1\" size=\"xxl\" color=\"secondary\">\n          {TranslateString(999, 'MoonWalker Collectibles')}\n        </Heading>\n      </StyledHero>\n      <NftList />\n    </Page>\n  )\n}\n\nexport default Collectibles\n"],"sourceRoot":""}