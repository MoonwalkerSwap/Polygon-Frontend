{"version":3,"sources":["hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CardValue.tsx","views/Home/components/CardMaticValue.tsx","views/Home/components/PdustHarvestBalance.tsx","views/Home/components/PdustWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/PdustStats.tsx","views/Home/components/EarnAPYCard.tsx","views/Home/components/EarnAssetCard.tsx","views/Home/components/Jet1.tsx","views/Home/components/Jet2.tsx","views/Home/components/JetMobile.tsx","views/Home/Home.tsx","hooks/useTokenBalance.ts","../node_modules/lodash/max.js","../node_modules/lodash/_baseExtremum.js","../node_modules/lodash/_baseGt.js"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","fetchBalances","a","calls","farmsConfig","map","farm","address","getAstroChefAddress","name","params","pid","multicall","astroChefABI","rawResults","results","index","balance","BigNumber","useAllEarnings","balances","setBalance","fetchAllBalances","astroABI","res","CardValue","value","decimals","fontSize","lineHeight","prefix","bold","color","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","style","CardMaticValue","props","Block","styled","div","PdustHarvestBalance","TranslateString","useI18n","earningsSum","reduce","accum","earning","pow","toNumber","earningsMatic","multipliedBy","usePricePdustMatic","PdustWalletBalance","pdustBalance","useTokenBalance","getPdustAddress","maticBalance","getBalanceNumber","StyledFarmStakingCard","Card","StyledUnlockButton","UnlockButton","theme","colors","button","CardImage","img","Label","textDisabled","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","src","alt","width","height","id","disabled","length","onClick","count","StyledPdustStats","PdustStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","pdustSupply","mediaQueries","lg","CardMidContent","Heading","attrs","extra","Circle","EarnAPYCard","farmsLP","useFarms","prices","useGetApiPrices","pdustPrice","highestApy","useMemo","apys","multiplier","lpTotalInQuoteToken","quoteTokenPriceUsd","quoteToken","symbol","toLowerCase","totalLiquidity","times","getFarmApy","poolWeight","maxApy","max","toLocaleString","maximumFractionDigits","animation","variant","justifyContent","exact","activeClassName","to","EarnAssetCard","activeNonPdustPools","pools","pool","isFinished","earningToken","includes","assets","orderBy","slice","join","float","keyframes","StyledBackground","Img","Jet1","Hero","Cards","BaseLayout","sm","CTACards","Background","Flex","Container","Home","Page","JetMobile","as","Jet2","FarmStakingCard","slowRefresh","setTotalSupply","PdustContract","getPdustContract","methods","call","supply","fetchTotalSupply","tokenAddress","web3","useWeb3","fetchBalance","contract","getERC20Contract","balanceOf","baseExtremum","require","baseGt","identity","module","exports","array","isSymbol","iteratee","comparator","computed","result","other"],"mappings":"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","file":"static/js/8.c23cd359.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getAstroChefAddress } from 'utils/addressHelpers'\nimport astroChefABI from 'config/abi/astroChef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getAstroChefAddress(),\n        name: 'pendingPdust',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(astroChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getAstroChefAddress } from 'utils/addressHelpers'\nimport astroABI from 'config/abi/astroChef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getAstroChefAddress(),\n        name: 'pendingPdust',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(astroABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from 'polygon-moonwalkerswap-uikit'\n\nexport interface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  lineHeight?: string\n  prefix?: string\n  bold?: boolean\n  color?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({\n  value,\n  decimals,\n  fontSize = '40px',\n  lineHeight = '1',\n  prefix = '',\n  bold = true,\n  color = 'text',\n}) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport CardValue, { CardValueProps } from './CardValue'\n\nconst CardMaticValue: React.FC<CardValueProps> = (props) => {\n  return (\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\n  )\n}\n\nexport default CardMaticValue\n","import React from 'react'\nimport { Text } from 'polygon-moonwalkerswap-uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport { usePricePdustMatic } from 'state/hooks'\nimport styled from 'styled-components'\nimport CardValue from './CardValue'\nimport CardMaticValue from './CardMaticValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n}\n`\n\nconst PdustHarvestBalance = () => {\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const earningsMatic = new BigNumber(earningsSum).multipliedBy(usePricePdustMatic()).toNumber()\n\n  if (!account) {\n    return (\n      <Text fontSize=\"36px\" color=\"text\" style={{ lineHeight: '76px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\n      <CardMaticValue value={earningsMatic} />\n    </Block>\n  )\n}\n\nexport default PdustHarvestBalance\n","import React from 'react'\nimport { Text } from 'polygon-moonwalkerswap-uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getPdustAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { usePricePdustMatic } from 'state/hooks'\nimport { BigNumber } from 'bignumber.js'\nimport CardValue from './CardValue'\nimport CardMaticValue from './CardMaticValue'\n\nconst PdustWalletBalance = () => {\n  const TranslateString = useI18n()\n  const pdustBalance = useTokenBalance(getPdustAddress())\n  const maticBalance = new BigNumber(getBalanceNumber(pdustBalance)).multipliedBy(usePricePdustMatic()).toNumber()\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return (\n      <Text fontSize=\"36px\" color=\"text\" style={{ lineHeight: '54px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <>\n      <CardValue value={getBalanceNumber(pdustBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\n      <CardMaticValue value={maticBalance} />\n    </>\n  )\n}\n\nexport default PdustWalletBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from 'polygon-moonwalkerswap-uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport PdustHarvestBalance from './PdustHarvestBalance'\nimport PdustWalletBalance from './PdustWalletBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/moon/cardbg.svg');\n  background-repeat: no-repeat;\n  min-height: 376px;\n`\nconst StyledUnlockButton = styled(UnlockButton)`\n\n  background: ${({ theme }) => theme.colors.button};\n  color: #ffffff;\n  width: 100%;\n  border-radius: 7px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textDisabled};\n  font-size: 18px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/moon/wings.svg\" alt=\"wings logo\" width={64} height={64} />\n        <Block>\n          <Label>{TranslateString(544, 'pDUST to Harvest')}:</Label>\n          <PdustHarvestBalance />\n        </Block>\n        <Block>\n          <Label>{TranslateString(546, 'pDUST in Wallet')}:</Label>\n          <PdustWalletBalance />\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              width=\"100%\"\n\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting pDUST')\n                : TranslateString(532, `Harvest all (${balancesWithValue.length})`, {\n                    count: balancesWithValue.length,\n                  })}\n            </Button>\n          ) : (\n            <StyledUnlockButton width=\"100%\" />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from 'polygon-moonwalkerswap-uikit'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getPdustAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\n\nconst StyledPdustStats = styled(Card)`\n  background-image: url('/images/moon/bg2.svg');\n  background-repeat: no-repeat;\n  background-position: bottom right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst PdustStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getPdustAddress()))\n  const pdustSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\n\n  return (\n    <StyledPdustStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(534, \"pDUST Stats\")}\n        </Heading>\n        <CardImage src=\"/images/moon/wings.svg\" alt=\"wings logo\" width={64} height={64} />\n        <Block>\n          {pdustSupply && <CardValue fontSize=\"36px\" value={pdustSupply} />}\n          <Text fontSize=\"14px\" color=\"#808080\">{TranslateString(536, \"Total pDUST Supply\")}</Text>\n        </Block>\n        <Block>\n          <CardValue fontSize=\"36px\" decimals={0} value={burnedBalance} />\n          <Text fontSize=\"14px\" color=\"#808080\">{TranslateString(538, \"Total pDUST Burned\")}</Text>\n        </Block>\n        <Block>\n          <CardValue fontSize=\"36px\" decimals={0} value={25} />\n          <Text fontSize=\"14px\" color=\"#808080\">{TranslateString(540, \"New pDUST/block\")}</Text>\n        </Block>\n      </CardBody>\n    </StyledPdustStats>\n  )\n}\n\nexport default PdustStats\n","import React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from 'polygon-moonwalkerswap-uikit'\nimport max from 'lodash/max'\nimport { NavLink } from 'react-router-dom'\nimport useI18n from 'hooks/useI18n'\nimport BigNumber from 'bignumber.js'\nimport { getFarmApy } from 'utils/apy'\nimport { useFarms, usePricePdustMatic, useGetApiPrices } from 'state/hooks'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'lg' })`\n  line-height: 44px;\n  Width: 75%;\n  color: ${({theme}) => theme.colors.extra}\n`\nconst Circle = styled.div`\n  background: #3D2C8D;\n  margin-top: -50px;\n  width: 59px;\n  height: 59px;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 40px;\n`\n\nconst EarnAPYCard = () => {\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const prices = useGetApiPrices()\n  const pdustPrice = usePricePdustMatic()\n\n  const highestApy = useMemo(() => {\n    const apys = farmsLP\n      // Filter inactive farms, because their theoretical APY is super high. In practice, it's 0.\n      .filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\n      .map((farm) => {\n        if (farm.lpTotalInQuoteToken && prices) {\n          const quoteTokenPriceUsd = prices[farm.quoteToken.symbol.toLowerCase()]\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\n          return getFarmApy(farm.poolWeight, pdustPrice, totalLiquidity)\n        }\n        return null\n      })\n\n    const maxApy = max(apys)\n    return maxApy?.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }, [pdustPrice, farmsLP, prices])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading color=\"text\" size=\"lg\">\n          Earn up to\n        </Heading>\n        <CardMidContent >\n          {highestApy ? (\n            `${highestApy}% ${TranslateString(736, 'APR')}`\n          ) : (\n            <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n          )}\n        </CardMidContent>\n        <Flex justifyContent=\"space-between\">\n          <Heading color=\"text\" size=\"lg\">\n            in Farms\n          </Heading>\n          <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apy-cta\">\n            <Circle>\n              <ArrowForwardIcon  color=\"#000000\" />\n            </Circle>\n          </NavLink>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAPYCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport orderBy from 'lodash/orderBy'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from 'polygon-moonwalkerswap-uikit'\nimport { NavLink } from 'react-router-dom'\nimport pools from 'config/constants/pools'\nimport { Pool } from 'state/types'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n`\nconst Circle = styled.div`\n  background: #FEC803;\n  margin-top: -50px;\n  width: 59px;\n  height: 59px;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 40px;\n`\n\nconst EarnAssetCard = () => {\n  const activeNonPdustPools = pools.filter((pool) => !pool.isFinished && !pool.earningToken.symbol.includes('pDUST'))\n  // eslint-disable-next-line\n  const latestPools: Pool[] = orderBy(activeNonPdustPools, ['sortOrder', 'pid'], ['desc', 'desc']).slice(0, 3)\n  // Always include pDUST\n  const assets = ['pDUST'].join(', ')\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading color=\"text\" size=\"lg\">\n          Earn\n        </Heading>\n        <CardMidContent color=\"extra\">{assets}</CardMidContent>\n        <Flex justifyContent=\"space-between\">\n          <Heading color=\"text\" size=\"lg\">\n            in Pools\n          </Heading>\n          <NavLink exact activeClassName=\"active\" to=\"/syrup\" id=\"pool-cta\">\n            <Circle>\n              <ArrowForwardIcon  color=\"#000000\" />\n            </Circle>\n          </NavLink>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAssetCard\n","import React from 'react'\nimport styled, {keyframes} from 'styled-components'\n\nconst float = keyframes`\n\t0% {\n\t\ttransform: translatey(0px);\n\t}\n\t50% {\n\t\ttransform: translatey(10px);\n\t}\n\t100% {\n\t\ttransform: translatey(0px);\n\t}\n`;\n\nconst StyledBackground = styled.div`\n\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display:block;\n    background-image: url('/images/moon/jetbg.svg');\n\n  }\n`\n\n\nconst Img = styled.img`\n  animation: ${float} 4s ease-in-out infinite;\n  transform: translate3d(0, 0, 0);\n`\n\nconst Jet1 = () => {\n\n\n  return (\n    <StyledBackground>\n      <Img src=\"/images/moon/jet1.png\" alt=\"jet\"/>\n    </StyledBackground>\n  )\n}\n\nexport default Jet1\n","import React from 'react'\nimport styled, {keyframes} from 'styled-components'\n\nconst float = keyframes`\n\t0% {\n\t\ttransform: translatey(0px);\n\t}\n\t50% {\n\t\ttransform: translatey(10px);\n\t}\n\t100% {\n\t\ttransform: translatey(0px);\n\t}\n`;\n\nconst StyledBackground = styled.div`\n\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display:block;\n    background-image: url('/images/moon/jetbg.svg');\n    background-repeat: no-repeat;\n  }\n`\n\nconst Img = styled.img`\n  animation: ${float} 4s ease-in-out infinite;\n  transform: translate3d(0, 0, 0);\n`\n\nconst Jet1 = () => {\n\n\n  return (\n    <StyledBackground>\n      <Img src=\"/images/moon/jet2.png\" alt=\"jet\"/>\n    </StyledBackground>\n  )\n}\n\nexport default Jet1\n","import React from 'react'\nimport styled, {keyframes} from 'styled-components'\n\nconst float = keyframes`\n\t0% {\n\t\ttransform: translatey(0px);\n\t}\n\t50% {\n\t\ttransform: translatey(10px);\n\t}\n\t100% {\n\t\ttransform: translatey(0px);\n\t}\n`;\n\nconst StyledBackground = styled.div`\n  display:block;\n  background-image: url('/images/moon/jetbg.svg');\n  padding-bottom: 30px;\n  ${({ theme }) => theme.mediaQueries.lg} {\n\n    display: none;\n  }\n`\n\n\nconst Img = styled.img`\n  animation: ${float} 4s ease-in-out infinite;\n  transform: translate3d(0, 0, 0);\n`\n\nconst Jet1 = () => {\n\n\n  return (\n    <StyledBackground>\n      <Img src=\"/images/moon/jet1.png\" alt=\"jet\"/>\n    </StyledBackground>\n  )\n}\n\nexport default Jet1\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from 'polygon-moonwalkerswap-uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\n// eslint-disable-next-line\nimport LotteryCard from 'views/Home/components/LotteryCard'\nimport PdustStats from 'views/Home/components/PdustStats'\n// eslint-disable-next-line\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\nimport EarnAPYCard from 'views/Home/components/EarnAPYCard'\n// eslint-disable-next-line\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\n// eslint-disable-next-line\nimport WinCard from 'views/Home/components/WinCard'\n\n// SpaceJets\nimport Jet1 from './components/Jet1'\nimport Jet2 from './components/Jet2'\nimport JetMobile from './components/JetMobile'\n\nconst Hero = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 40px;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst CTACards = styled(BaseLayout)`\n  align-items: start;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 4;\n    }\n  }\n`\nconst Background = styled.div`\n  width: 100%;\n  background-image: url('/images/jet/bg5.svg');\n\n  background-repeat: no-repeat;\n  background-position: center center;\n`\nconst Flex = styled.div`\n  display: flex;\n`\nconst Container = styled.div``\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Background>\n      <Page>\n        <Hero>\n          <JetMobile />\n          <Flex>\n            <Jet1/>\n            <Container>\n              <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"text\">\n                {TranslateString(576, 'Polygon MoonWalkerSwap')}\n              </Heading>\n              <Text>{TranslateString(578, 'The Newest AMM and yield farm on Polygon Chain.')}</Text>\n            </Container>\n            <Jet2/>\n          </Flex>\n        </Hero>\n        <div>\n          <Cards>\n            <FarmStakingCard />\n            <PdustStats />\n          </Cards>\n          <CTACards>\n            <EarnAPYCard />\n            <EarnAssetCard />\n          </CTACards>\n        </div>\n      </Page>\n    </Background>\n  )\n}\n\nexport default Home\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getERC20Contract, getPdustContract } from 'utils/contractHelpers'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account } = useWeb3React()\n  const web3 = useWeb3()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getERC20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf(account).call()\n      setBalance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const PdustContract = getPdustContract()\n      const supply = await PdustContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getERC20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    identity = require('./identity');\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nmodule.exports = max;\n","var isSymbol = require('./isSymbol');\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseExtremum;\n","/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nmodule.exports = baseGt;\n"],"sourceRoot":""}